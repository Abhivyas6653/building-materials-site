{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react'; // Make sure React is imported\n\nfunction App() {\n  _s();\n  const [materials, setMaterials] = useState([]); // Assuming materials is an array\n  const [error, setError] = useState < string | null > null; // Type for error\n  const [loading, setLoading] = useState < boolean > true; // Type for loading\n\n  useEffect(() => {\n    // This is the URL for your backend API endpoint that provides materials data.\n    // It should be running on http://localhost:5000 and the route is /api/materials.\n    fetch('http://localhost:5000/api/materials').then(response => {\n      if (!response.ok) {\n        // If the network response was not successful (status code 200-299)\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      return response.json();\n    }).then(data => {\n      // Update the \"materials\" state with the fetched data\n      setMaterials(data);\n      // Set loading to false as data has been loaded\n      setLoading(false);\n    }).catch(error => {\n      // Handle any errors that occurred during the fetch operation\n      console.error(\"Error fetching data:\", error);\n      setError(error.message); // Set the error state\n      setLoading(false); // Also set loading to false on error\n    }); // Make sure this semicolon is present\n  }, []); // Empty dependency array means this effect runs once after the initial render\n\n  // You'll likely have some JSX rendering here, e.g.:\n  // if (loading) return <div>Loading materials...</div>;\n  // if (error) return <div>Error: {error}</div>;\n  // return (\n  //     <div>\n  //         <h1>Materials</h1>\n  //         {/* Render materials here */}\n  //     </div>\n  // );\n}\n_s(App, \"uid4i0VZRFU7LQ6BSqyDxLX1TdA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","App","_s","materials","setMaterials","error","setError","string","loading","setLoading","boolean","fetch","then","response","ok","Error","status","json","data","catch","console","message","_c","$RefreshReg$"],"sources":["C:/Users/Madhav/Downloads/project/building-materials-frontend/my-react-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'; // Make sure React is imported\n\nfunction App() {\n    const [materials, setMaterials] = useState([]); // Assuming materials is an array\n    const [error, setError] = useState<string | null>(null); // Type for error\n    const [loading, setLoading] = useState<boolean>(true); // Type for loading\n\n    useEffect(() => {\n        // This is the URL for your backend API endpoint that provides materials data.\n        // It should be running on http://localhost:5000 and the route is /api/materials.\n        fetch('http://localhost:5000/api/materials')\n            .then((response) => {\n                if (!response.ok) {\n                    // If the network response was not successful (status code 200-299)\n                    throw new Error(`HTTP error! Status: ${response.status}`);\n                }\n                return response.json();\n            })\n            .then((data) => {\n                // Update the \"materials\" state with the fetched data\n                setMaterials(data);\n                // Set loading to false as data has been loaded\n                setLoading(false);\n            })\n            .catch((error) => {\n                // Handle any errors that occurred during the fetch operation\n                console.error(\"Error fetching data:\", error);\n                setError(error.message); // Set the error state\n                setLoading(false); // Also set loading to false on error\n            }); // Make sure this semicolon is present\n    }, []); // Empty dependency array means this effect runs once after the initial render\n\n    // You'll likely have some JSX rendering here, e.g.:\n    // if (loading) return <div>Loading materials...</div>;\n    // if (error) return <div>Error: {error}</div>;\n    // return (\n    //     <div>\n    //         <h1>Materials</h1>\n    //         {/* Render materials here */}\n    //     </div>\n    // );\n}\n\nexport default App;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO,CAAC,CAAC;;AAEpD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACX,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAChD,MAAM,CAACM,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,GAACQ,MAAM,GAAG,IAAI,GAAE,IAAK,CAAC,CAAC;EACzD,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,GAACW,OAAO,GAAE,IAAK,CAAC,CAAC;;EAEvDV,SAAS,CAAC,MAAM;IACZ;IACA;IACAW,KAAK,CAAC,qCAAqC,CAAC,CACvCC,IAAI,CAAEC,QAAQ,IAAK;MAChB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;QACd;QACA,MAAM,IAAIC,KAAK,CAAC,uBAAuBF,QAAQ,CAACG,MAAM,EAAE,CAAC;MAC7D;MACA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;IAC1B,CAAC,CAAC,CACDL,IAAI,CAAEM,IAAI,IAAK;MACZ;MACAd,YAAY,CAACc,IAAI,CAAC;MAClB;MACAT,UAAU,CAAC,KAAK,CAAC;IACrB,CAAC,CAAC,CACDU,KAAK,CAAEd,KAAK,IAAK;MACd;MACAe,OAAO,CAACf,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5CC,QAAQ,CAACD,KAAK,CAACgB,OAAO,CAAC,CAAC,CAAC;MACzBZ,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;IACvB,CAAC,CAAC,CAAC,CAAC;EACZ,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACJ;AAACP,EAAA,CAvCQD,GAAG;AAAAqB,EAAA,GAAHrB,GAAG;AAyCZ,eAAeA,GAAG;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}